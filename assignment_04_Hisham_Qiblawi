class Task:
  def __init__(self, task_id, description, priority):
      self.task_id = task_id
      self.description = description
      self.priority = priority
      self.completed = False
class PriorityQueue:
  def __init__(self):
      self.queue = []

  def put(self, task):
      self.queue.append(task)
      self.queue.sort(key=lambda x: x[0], reverse=True)

  def get(self):
      return self.queue.pop()

  def empty(self):
      return len(self.queue) == 0

class TaskManager:
  def __init__(self):

      self.task_queue = PriorityQueue()
      self.task_history = []

  def add_task(self, task):
      self.task_queue.put((task.priority, task))

  def complete_task(self):
      if not self.task_queue.empty():
          _, completed_task = self.task_queue.get()
          completed_task.completed = True
          self.task_history.append(completed_task)
          print("Task ID {}, marked as completed.".format(completed_task.task_id))
      else:
          print("No tasks in the queue.")

  def get_task_by_id(self, task_id):
      for _, task in self.task_queue.queue:
          if task.task_id == task_id:
              return task
      return None

  def get_next_task(self):
      if not self.task_queue.empty():
          return self.task_queue.queue[0][1]
      else:
          return None

  def display_all_tasks(self):
      tasks = sorted(self.task_queue.queue, key=lambda x: x[1].priority)
      for _, task in tasks:
          print("Task ID: {}, Priority: {}, Description: {}".format(task.task_id, task.priority, task.description))

  def display_incomplete_tasks(self):
      incomplete_tasks = [task for _, task in self.task_queue.queue if not task.completed]
      for task in incomplete_tasks:
          print("Task ID: {}, Priority: {}, Description: {}".format(task.task_id, task.priority, task.description))

  def display_last_completed_task(self):
      if self.task_history:
          last_completed_task = self.task_history[-1]
          print("Last Completed Task ID: {}, Priority: {}, Description: {}".format(last_completed_task.task_id, last_completed_task.priority, last_completed_task.description))
      else:
          print("No completed tasks.")

# Menu implementation
def display_menu():
  print("Task Manager Menu:")
  print("1. Add a new task")
  print("2. Get a task by ID")
  print("3. Mark the highest priority task as completed")
  print("4. Display all tasks in order of priority")
  print("5. Display only the tasks that are not completed")
  print("6. Display the last completed task")
  print("7. Exit")

task_manager = TaskManager()

while True:
  display_menu()
  choice = input("Enter your choice (1-7): ")

  if choice == '1':
      description = input("Enter task description: ")
      priority = int(input("Enter task priority: "))
      new_task = Task(len(task_manager.task_queue.queue) + 1, description, priority)
      task_manager.add_task(new_task)
      print("Task added successfully.")

  elif choice == '2':
      task_id = int(input("Enter task ID: "))
      task = task_manager.get_ta2sk_by_id(task_id)
      if task:
          print("Task ID: {}, Priority: {}, Description: {}".format(task.task_id, task.priority, task.description))
      else:
          print("Task not found.")

  elif choice == '3':
      task_manager.complete_task()

  elif choice == '4':
      task_manager.display_all_tasks()

  elif choice == '5':
      task_manager.display_incomplete_tasks()

  elif choice == '6':
      task_manager.display_last_completed_task()

  elif choice == '7':
      print("Exiting the Task Manager.")
      break

  else:
      print("Invalid choice. Please enter a number between 1 and 7.")
